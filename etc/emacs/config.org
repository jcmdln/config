# -*- mode : org -*-
#+TITLE: My literate Emacs configuration
#+SUBTITLE: A blend of org-mode, use-package, and too many packages.
#+STARTUP: indent
#+LANGUAGE: en

This is my attempt at a literate Emacs configuration focused on
reducing initialization time while being feature-complete. I
accomplished this by using org-mode, use-package, and the various
configuration files available for staging tasks to different stages of
the initialization process.

* Warnings
I have made many changes to how Emacs functions. While I intend to keep
default Emacs keybinds and behaviors as much as possible, over the
years I have slightly diverged when deemed suitable. Whether you find
these changes intrusive or not is entirely fair, though heed this brief
warning.

I would suggest that you use the contents of this file as a reference
for your own configuration, as you may otherwise experience unexpected
behavior.

* About
The way my configuration is defined is that you should only need to
share this file to replicate the entire setup.

To use this configuration file, simply download and move it to
"~/.emacs.d/config.org". Next, you will run the following in your
terminal:

#+begin_src shell :tangle no
emacs --eval='(org-babel-load-file "~/.emacs.d/config.org")'
#+end_src

You may also open Emacs and run org-babel-load-file at the same file.

* Configuration Files
In this section, we will review each file used by this configuration as
well as their contents.

** init.el
This file is loaded during the init process, and is used to handle our
initial configuration before attempting to load packages.

*** General
Here we will make some modifications to minor, but important things
that should be handled early.

First, we'll specify our `custom-file` so that our configuration files
won't have a configuration block appended to them.

#+begin_src emacs-lisp :tangle init.el
(setq custom-file "~/.emacs.d/custom.el")
#+end_src

*** Garbage Collection
Emacs has some considerations for older and more memory restricted
systems in terms of how the garbage collector is configured. On systems
with restrictive amounts of memory, you may want to adjust or remove
these changes.

**** gc-cons-percentage
For the purposes of initialization, we'll increase `gc-cons-percentage`
to defer garbage collection. The settings below mean that until
reaching 75% of the current heap size, GC will not occur. After init
completes we will set this to 15%, though the default is 10%.

#+begin_src emacs-lisp :tangle init.el
(setq gc-cons-percentage 0.75)

(add-hook 'after-init-hook
          (lambda ()
            (setq gc-cons-percentage 0.15)))
#+end_src

**** gc-cons-threshold
Now we will increase the `gc-cons-threshold`, which is the number of
bytes of storage that must be allocated for Lisp objects after one
garbage collection in order to trigger another garbage collection. On
32-bit systems, this is 400KB and on 64-bit systems this is 800KB. By
specifying a larger value, garbage collection will occur less often.

We'll set this value to 2MB globally, which will more than halve the
total number of GC pauses we experience while not drastically
increasing the amount of time needed for GC to complete.

#+begin_src emacs-lisp :tangle init.el
(setq gc-cons-threshold (* 2 1024 1024))
#+end_src

*** Encoding
Here we will attempt to enforce using utf-8 encoding by default. While
this may not be very important for general usage, I much prefer this
behavior.

#+begin_src emacs-lisp :tangle init.el
(setq prefer-coding-system       'utf-8
      set-default-coding-systems 'utf-8
      set-language-environment   "UTF-8"
      set-locale-environment     "en_US.UTF-8")
#+end_src

*** Environment
Emacs already inherits much of what is currently in the system's
environment, though here we'll ensure that this is occurring. We will
modify our environment slightly so that the current Emacs session is
our default editor, which is mainly useful for git/magit.

#+begin_src emacs-lisp :tangle init.el
(setenv "EDITOR"         "emacsclient")
(setenv "GIT_EDITOR"     "emacsclient")
(setenv "MANPATH"        (getenv "MANPATH"))
(setenv "PATH"           (getenv "PATH"))
(setenv "PROMPT_COMMAND" "")
(setenv "SHELL"          (getenv "SHELL"))
(setenv "TERM"           (getenv "TERM"))
#+end_src

*** Appearance
In terms of appearance, I prefer to have as little wasted space and
visual clutter while using built-in themes.

**** Buffers
Change default buffer behaviors

#+begin_src emacs-lisp :tangle init.el
(setq initial-scratch-message     ""
      inhibit-splash-screen       t
      inhibit-startup-buffer-menu t)
#+end_src

Enforce always re-using the currently selected frame when a new buffer
is opened or focused.

#+begin_src emacs-lisp :tangle init.el
(setq pop-up-frames nil
      pop-up-windows nil
      display-buffer-reuse-frames t)

(setq Man-notify-method 'pushy)
#+end_src

**** Toolbars
Prevent tool bars from ever being initialized. We do this by defining
toolbars as "disabled" so that when they are called after init, they are
never loaded.

#+begin_src emacs-lisp :tangle init.el
(when (fboundp 'menu-bar-mode)   (menu-bar-mode   -1))
(when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(when (fboundp 'tool-bar-mode)   (tool-bar-mode   -1))
#+end_src

**** Theme
I don't care for using third-party themes, and think that tango-dark is
more than adequate. We will load the built-in tango-dark theme and use
the default Monospace system font. I used to adjust the font size and
line spacing but the same behavior may be achieved by adjusting your
system defaults.

#+begin_src emacs-lisp :tangle init.el
(load-theme 'tango-dark)
(set-face-attribute :family "Monospace")
#+end_src

Change some default behaviors so that tabs aren't used, trailing
whitespace is deleted, and on save all tabs are replaced with spaces.

#+begin_src emacs-lisp :tangle init.el
(setq indent-tabs-mode nil)

(add-hook 'before-save-hook
          (lambda()
            (delete-trailing-whitespace)
            (if (not indent-tabs-mode)
                (untabify (point-min) (point-max)))))
#+end_src

Next we'll adjust some settings to improve editing files.

#+begin_src emacs-lisp :tangle init.el
(setq column-number-mode    t
      require-final-newline t
      show-paren-delay      0.0
      visible-bell          nil)

(show-paren-mode t)
#+end_src

*** Bootstrap
This section ensures that the configuration gets loaded, and is
refreshed automatically.

#+begin_src emacs-lisp :tangle init.el
(defun emacs-reconfig()
  "Build and compile 'org-mode' config."
  (interactive)
  (require 'org)
  (org-babel-load-file "~/.emacs.d/config.org")
  (byte-compile-file "~/.emacs.d/config.el"))
#+end_src

Missing description

#+begin_src emacs-lisp :tangle init.el
(if (file-newer-than-file-p "~/.emacs.d/config.org"
                            "~/.emacs.d/config.el")
    (emacs-reconfig)
  (load "~/.emacs.d/config.el"))
#+end_src

** config.el
This is the file where the rest of this configuration is kept.

*** Package Management
Missing description

#+begin_src emacs-lisp :tangle config.el
(require 'package)
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(setq package-user-dir "~/.emacs.d/pkg/"
      package-archives
      '(("GNU ELPA"     . "http://elpa.gnu.org/packages/")
        ("MELPA Stable" . "https://stable.melpa.org/packages/")
        ("MELPA"        . "https://melpa.org/packages/"))
      package-archive-priorities
      '(("GNU ELPA"     . 3)
        ("MELPA Stable" . 2)
        ("MELPA"        . 1)))
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(package-initialize)
#+end_src

**** use-package
Missing description

#+begin_src emacs-lisp :tangle config.el
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(eval-when-compile
  (require 'use-package)
  (require 'bind-key))
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(setq use-package-always-defer      t
      use-package-always-ensure     t
      use-package-check-before-init t)
#+end_src

**** no-littering
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package no-littering
  :demand t
  :config
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))
#+end_src

*** Extras
This part is a bit unorganized though reduces clutter by inhibiting
buffers and adjusting how Emacs' clipboard works.

#+begin_src emacs-lisp :tangle config.el
(setq mouse-yank-at-point                 t
      save-interprogram-paste-before-kill t
      select-enable-primary               nil)
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(add-to-list 'display-buffer-alist
             '("*Help*" display-buffer-same-window))

(add-to-list 'display-buffer-alist
             '("*Man*" display-buffer-same-window))
#+end_src

*** Input
I do make some minor changes to input methods, though I intend to remain
as faithful to "the Emacs way" as I can.

**** Keyboard
In terms of keyboard input, I only make slight adjustments though their
usefulness is highly subjective.

***** Keybinds
From my time of using tmux + vim I had grown to prefer some custom
keybinds I made for handling splits or navigating through panes. Here
I've attempted to recreated the subjective ease of navigation I prefer:

#+begin_src emacs-lisp :tangle config.el
(global-set-key (kbd "M--")
                (lambda()
                  (interactive)
                  (split-window-vertically)
                  (other-window 1 nil)
                  (switch-to-next-buffer)))

(global-set-key (kbd "M-=")
                (lambda()
                  (interactive)
                  (split-window-horizontally)
                  (other-window 1 nil)
                  (switch-to-next-buffer)))
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(global-set-key (kbd "<M-down>")  'windmove-down)
(global-set-key (kbd "<M-left>")  'windmove-left)
(global-set-key (kbd "<M-right>") 'windmove-right)
(global-set-key (kbd "<M-up>")    'windmove-up)
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(global-set-key (kbd "C-c c")     'comment-or-uncomment-region)
#+end_src

**** Mouse
In terms of the mouse, I really only adjust scrolling behavior and add
xterm support:

#+begin_src emacs-lisp :tangle config.el
(setq mouse-wheel-follow-mouse      't
      mouse-wheel-progressive-speed nil
      mouse-wheel-scroll-amount     '(1 ((shift) . 1)))

(add-hook 'after-init-hook
          (lambda()
            (xterm-mouse-mode 1)))

(global-set-key (kbd "<mouse-4>")
                (lambda() (interactive) (scroll-down-line 3)))
(global-set-key (kbd "<mouse-5>")
                (lambda() (interactive) (scroll-up-line 3)))
#+end_src

**** Scrolling
I prefer scrolling to behave more like other editors, where the cursor
reaches the final line before scrolling and the cursor scrolls one line
at a time. This does cause emacs to use additional resources, though I
prefer this behavior to the default.

#+begin_src emacs-lisp :tangle config.el
(setq auto-window-vscroll             nil
      scroll-conservatively           101
      scroll-margin                   0
      scroll-preserve-screen-position 1
      scroll-step                     1
      scroll-up-aggressively          0.0
      scroll-down-aggressively        0.0)
#+end_src

*** Packages
In this section we will define our packages and their respective
configurations, organized around their purpose into top-level sections.

**** Built-ins
These are packages that Emacs currently ships with.

***** eshell
The default configuration of eshell is, well, bad. The ordinary user who
opens it once and considers it to be a bad tool is missing out of the
full potential eshell provides. I've spent a _lot_ of time making eshell
behave and look like typical unix shells, so maybe try it for yourself.

#+begin_src emacs-lisp :tangle config.el
(use-package eshell
  :config
  (setq eshell-banner-message             ""
        eshell-cmpl-cycle-completions     nil
        eshell-error-if-no-glob           t
        eshell-hist-ignoredups            t
        eshell-history-size               4096
        eshell-prefer-lisp-functions      t
        eshell-save-history-on-exit       t
        eshell-scroll-to-bottom-on-input  nil
        eshell-scroll-to-bottom-on-output nil
        eshell-scroll-show-maximum-output nil
        eshell-prompt-regexp              "^[^#$\n]*[#$] ")

  (setq eshell-prompt-function
        (lambda nil
          (concat "[" (user-login-name) "@"
                  (substring (car (split-string (system-name) "\\."))) " "
                  (if (string= (eshell/pwd) (getenv "HOME"))
                      "~" (eshell/basename (eshell/pwd))) "]"
                  (if (= (user-uid) 0) "# " "$ "))))

  (setq eshell-visual-commands
        '("alsamixer" "atop" "htop" "less" "mosh" "nano" "ssh"
          "tail" "top" "vi" "vim" "watch"))

  (defun eshell/clear()
    (interactive)
    (recenter 0))

  (defun eshell-new()
    "Open a new instance of eshell."
    (interactive)
    (eshell 'N)))
#+end_src

***** eww
I like eww, but it was missing a few things for me to use it as my
primary browser for non-interactive sites. Here we will ensure that eww
is our primary browser when visiting links, and that images are blocked
by default. Should you have multiple eww buffers open and want to
toggle displaying images in a specific buffer, you may now do so.

#+begin_src emacs-lisp :tangle config.el
(use-package eww
  :init
  (setq browse-url-browser-function 'eww-browse-url)

  :config
  (setq shr-blocked-images "")

  (defun eww-toggle-images()
    "Toggle blocking images in eww."
    (interactive)
    (if (bound-and-true-p shr-blocked-images)
        (setq-local shr-blocked-images nil)
      (setq-local shr-blocked-images ""))
    (eww-reload))

  (defun eww-new()
    "Open a new instance of eww."
    (interactive)
    (let ((url (read-from-minibuffer "Enter URL or keywords: ")))
      (switch-to-buffer (generate-new-buffer "*eww*"))
      (eww-mode)
      (eww url))))
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package eww-lnum
  :after (eww)
  :init
  (add-hook 'eww-mode-hook
            (lambda()
              (define-key eww-mode-map "f" 'eww-lnum-follow)
              (define-key eww-mode-map "F" 'eww-lnum-universal))))
#+end_src

***** gnus
I've bounced between using "real" email clients and gnus quite a few
times, though here we will attempt to make gnus behave like other
clients.

#+begin_src emacs-lisp :tangle config.el
(use-package gnus
  :disabled
  :bind
  (("<M-down>" . windmove-down)
   ("<M-up>"   . windmove-up))

  :init
  (add-hook 'gnus-summary-hook   'gnus-summary-sort-by-most-recent-date)

  :config
  (setq gnus-sum-thread-tree-false-root        ""
        gnus-sum-thread-tree-indent            "  "
        gnus-sum-thread-tree-leaf-with-other   "├─> "
        gnus-sum-thread-tree-root              ""
        gnus-sum-thread-tree-single-leaf       "╰─> "
        gnus-sum-thread-tree-vertical          "│ ")

  (setq gnus-summary-line-format               "%U%R:%-15,15o  %-15,15f  %B%S\n"
        gnus-summary-thread-gathering-function 'gnus-gather-threads-by-references
        gnus-thread-sort-functions             '(gnus-thread-sort-by-date))

  (if (file-exists-p "~/.emacs.d/usr/gnus.el")
      (load-file     "~/.emacs.d/usr/gnus.el")))
#+end_src

***** ibuffer
I'm not a fan of the default ibuffer behavior, if the total size of this
section does not make that clear. Here we will sort buffers, show human
readable sizes, and define a ton of filter groups.

#+begin_src emacs-lisp :tangle config.el
(use-package ibuffer
  :bind
  (("C-x C-b"         . ibuffer)
   ("<C-tab>"         . next-buffer)
   ("<C-iso-lefttab>" . previous-buffer))

  :init
  (add-hook 'ibuffer-hook      'ibuffer-auto-mode)
  (add-hook 'ibuffer-mode-hook 'ibuffer-do-sort-by-alphabetic)
  (add-hook 'ibuffer-auto-mode-hook
            (lambda ()
              (ibuffer-switch-to-saved-filter-groups "default")))

  :config
  (define-ibuffer-column size-h
    (:name "Size" :inline t)
    (cond
     ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
     ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
     (t (format "%8d" (buffer-size)))))

  (setq ibuffer-show-empty-filter-groups nil)

  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("exwm"
                  (mode . exwm-mode))

                 ("emacs"
                  (or (name . "^\\*scratch\\*$")
                      (name . "^\\*Messages\\*$")
                      (name . "^\\*Help\\*$")
                      (name . "^\\*Completions\\*$")
                      (name . "^\\*Compile-Log\\*")
                      (name . "^\\*Customize\\*")
                      (name . "^\\*Disabled Command\\*$")))

                 ("apps"
                  (or (mode . dired-mode)
                      (mode . eshell-mode)))

                 ("mail"
                  (or (mode . message-mode)
                      (mode . bbdb-mode)
                      (mode . mail-mode)
                      (mode . gnus-group-mode)
                      (mode . gnus-summary-mode)
                      (mode . gnus-article-mode)
                      (name . "^\\.bbdb$")
                      (name . "^\\.newsrc-dribble")))

                 ("feed"
                  (or (mode . eww-mode)
                      (name . "^\\*elfeed")))

                 ("irc"
                  (or (mode . circe-mode)
                      (mode . circe-channel-mode)
                      (mode . circe-server-mode)))

                 ("dev"
                  (or (name . "^\\*clang")
                      (name . "^\\*gcc")
                      (name . "^\\*RTags")
                      (name . "^\\*rdm\\*")
                      (name . "magit")
                      (name . "COMMIT_EDITMSG")
                      (name . "^\\*Flycheck")
                      (name . "^\\*Flyspell")))

                 ("docs"
                  (or (name . "^\\*Man ")
                      (name . "^\\*WoMan")
                      (mode . pdf-view-mode)))))))

  (setq ibuffer-formats
        '((mark modified read-only " "
                (name 35 35 :left :nil) " "
                (size-h 9 -1 :right) " "
                (mode 16 16 :left :elide) " "
                filename-and-process))))
#+end_src

***** scratch
I like opening multiple scratch buffers, so I added a function to allow
me to make a new numbered scratch buffer.

#+begin_src emacs-lisp :tangle config.el
(use-package scratch
  :init
  (defun scratch-new()
    "Open a new scratch buffer."
    (interactive)
    (switch-to-buffer (generate-new-buffer "*scratch*"))
    (lisp-mode)))
#+end_src

***** server
I feel that Emacs is missing some extensions for server-based functions
and added a warning when attempting to close Emacs. Also, if you want to
update your packages or kill Emacs without saving in a quicker fashion
you may appreciate the additional functions.

#+begin_src emacs-lisp :tangle config.el
(use-package server
  :bind ("C-x C-c" . server-stop)
  :init
  (unless (and (fboundp 'server-running-p)
               (server-running-p))
    (server-start))

  :config
  (defun server-kill()
    "Delete current Emacs server, then kill Emacs"
    (interactive)
    (if (y-or-n-p "Kill Emacs without saving? ")
        (kill-emacs)))

  (defun server-stop()
    "Prompt to save buffers, then kill Emacs."
    (interactive)
    (if (y-or-n-p "Quit Emacs? ")
        (save-buffers-kill-emacs)))

  (defun server-update()
    "Refresh package contents, then update all packages."
    (interactive)
    (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents))
    (package-utils-upgrade-all)))
#+end_src

**** Essentials
This section contains packages that integrate well with emacs while
extending the default behaviors. These packages, much like the title
implies, are essential for me.

***** async
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package async
  :config
  (async-bytecomp-package-mode '(all)))
#+end_src

***** auto-compile
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package auto-compile
  :config
  (auto-compile-on-load-mode)
  (auto-compile-on-save-mode))
#+end_src

***** counsel
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package counsel
  :bind
  (("<f1> f"  . counsel-describe-function)
   ("<f1> l"  . counsel-find-library)
   ("<f1> v"  . counsel-describe-variable)
   ("<f2> i"  . counsel-info-lookup-symbol)
   ("<f2> u"  . counsel-unicode-char)
   ("C-s"     . counsel-grep-or-swiper)
   ("C-S-o"   . counsel-rhythmbox)
   ("C-c g"   . counsel-git)
   ("C-c j"   . counsel-git-grep)
   ("C-c l"   . counsel-ag)
   ("C-r"     . counsel-minibuffer-history)
   ("C-x C-f" . counsel-find-file)
   ("C-x l"   . counsel-locate)
   ("M-x"     . counsel-M-x)))
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package counsel-etags
  :init
  (add-hook 'c-mode-hook
            (lambda ()
              (add-hook 'after-save-hook
                        'counsel-etags-virtual-update-tags 'append 'local)))
  (add-hook 'c++-mode-hook
            (lambda ()
              (add-hook 'after-save-hook
                        'counsel-etags-virtual-update-tags 'append 'local)))

  :config
  (setq-local large-file-warning-threshold nil)
  (setq-local tags-revert-without-query    t))
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package swiper
  :demand t)
#+end_src

***** flyspell
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package flyspell
  :disabled
  :init
  (add-hook 'markdown-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook     'flyspell-prog-mode)
  (add-hook 'text-mode-hook     'flyspell-mode))
#+end_src

***** ivy
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package ivy
  :bind
  (("C-c C-r" . ivy-resume)
   ("<f6>"    . ivy-resume))

  :init
  (ivy-mode 1)

  :config
  (setq ivy-use-virtual-buffers      t
        enable-recursive-minibuffers t))
#+end_src

***** package-utils
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package package-utils
  :demand t)
#+end_src

***** smartparens
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package smartparens
  :demand t
  :init
  (add-hook 'markdown-mode-hook 'smartparens-mode)
  (add-hook 'prog-mode-hook     'smartparens-mode)
  (add-hook 'text-mode-hook     'smartparens-mode)

  :config
  (setq sp-highlight-pair-overlay     nil
        sp-highlight-wrap-overlay     nil
        sp-highlight-wrap-tag-overlay nil))
#+end_src

***** undo-tree
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package undo-tree
  :demand t
  :config
  (global-undo-tree-mode))
#+end_src

***** xclip
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package xclip
  :init
  (xclip-mode 1))
#+end_src

**** Development
This section contains packages that are primarily used for development.
If you aren't using Emacs for development, this section will not be very
useful for you.

***** clang-format
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package clang-format
  :disabled)
#+end_src

***** company
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package company
  :init
  (add-hook 'lisp-mode-hook 'company-mode)
  (add-hook 'prog-mode-hook 'company-mode)
  (add-hook 'text-mode-hook 'company-mode)

  :config
  (setq company-tooltip-limit  20
        company-idle-delay     0.3
        company-echo-delay     0
        company-begin-commands '(self-insert-command)))
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package company-emoji
  :disabled
  :after (company))
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package company-shell
  :disabled
  :after (company))
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package company-web
  :disabled
  :after (company))
#+end_src

***** diff-hl
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package diff-hl
  :init
  (add-hook 'prog-mode-hook 'diff-hl-mode)
  (add-hook 'text-mode-hook 'diff-hl-mode))
#+end_src

***** flycheck
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package flycheck
  :demand t
  :init
  (add-hook 'prog-mode-hook 'flycheck-mode))
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package flycheck-inline
  :demand t
  :init
  (add-hook 'flycheck-mode-hook #'turn-on-flycheck-inline))
#+end_src

***** gist
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package gist)
#+end_src

***** highlight-indent-guides
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package highlight-indent-guides
  :demand t
  :init
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)

  :config
  (setq highlight-indent-guides-method 'character))
#+end_src

***** irony
At some point I'll explain what I've done here, because it was rather
annoying to get right.

#+begin_src emacs-lisp :tangle config.el
(use-package irony
  :init
  (defun my-irony-mode ()
    (when (memq major-mode '(c-mode c++-mode objc-mode))
      (irony-mode 1)))

  (add-hook 'c-mode-hook     'my-irony-mode)
  (add-hook 'c++-mode-hook   'my-irony-mode)
  (add-hook 'objc-mode       'my-irony-mode)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

  :config
  (define-key irony-mode-map [remap completion-at-point] 'counsel-irony)
  (define-key irony-mode-map [remap complete-symbol]     'counsel-irony))
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package company-irony
  :after (company irony)
  :config
  (add-to-list 'company-backends 'company-irony))
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package company-irony-c-headers
  :after (company irony company-irony)
  :config
  (add-to-list 'company-backends '(company-irony-c-headers company-irony)))
#+end_src

***** languages
This section is gross, and due for a rewrite to explain things a bit
better.

****** General
Missing description

#+begin_src emacs-lisp :tangle config.el
(add-hook 'lisp-mode-hook 'display-line-numbers-mode)
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
(add-hook 'text-mode-hook 'display-line-numbers-mode)
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(global-visual-line-mode t)
#+end_src

****** Android
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package android-mode
  :disabled)
#+end_src

****** Angular
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package angular-mode
  :disabled)
#+end_src

****** Ansible
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package ansible-vault
  :disabled)
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package company-ansible
  :disabled
  :after (company ansible-vault))
#+end_src

****** Apache
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package apache-mode
  :disabled)
#+end_src

****** C
Missing description

#+begin_src emacs-lisp :tangle config.el
(add-hook 'c-mode-hook
          (lambda()
            (add-to-list 'auto-mode-alist '("\\.h\\'" . c-mode))
            (setq-local c-default-style  "bsd")
            (setq-local c-set-style      "bsd")
            (setq-local c-basic-offset   4)
            (setq-local indent-tabs-mode t)
            (setq-local tab-width        4)))
#+end_src

****** C++
Missing description

#+begin_src emacs-lisp :tangle config.el
(add-hook 'c++-mode-hook
          (lambda()
            (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
            (setq-local c-default-style  "ellemtel")
            (setq-local c-set-style      "ellemtel")
            (setq-local c-basic-offset   4)
            (setq-local indent-tabs-mode t)
            (setq-local tab-width        4)))
#+end_src

****** Caddy
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package caddyfile-mode
  :disabled)
#+end_src

****** Clojure
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package clojure-mode
  :disabled
  :init
  (add-hook 'clojure-mode-hook 'flycheck-clojure 'local))
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package flycheck-clojure
  :disabled)
#+end_src

****** CMake
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package cmake-mode)
#+end_src

****** CoffeeScript
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package coffee-mode
  :disabled)
#+end_src

****** CSharp
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package csharp-mode
  :disabled)
#+end_src

****** Cuda
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package cuda-mode
  :disabled)
#+end_src

****** D
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package d-mode
  :disabled)
#+end_src

****** Dart
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package dart-mode
  :disabled)
#+end_src

****** Docker
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package docker-compose-mode)
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package dockerfile-mode)
#+end_src

****** DotEnv
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package dotenv-mode)
#+end_src

****** GDScript
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package gdscript-mode
  :disabled)
#+end_src

****** Git
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package gitattributes-mode)
(use-package gitconfig-mode)
(use-package gitignore-mode)
#+end_src

****** Go
Missing description

#+begin_src emacs-lisp :tangle config.el
(defun go-mode-install()
  "Install go-mode dependencies and log to *Messages*."
  (interactive)
  (eshell-command "go get -u -v github.com/go-delve/delve/cmd/dlv github.com/jstemmer/gotags github.com/stamblerre/gocode github.com/rogpeppe/godef golang.org/x/lint/golint golang.org/x/tools/cmd/goimports golang.org/x/tools/cmd/gorename golang.org/x/tools/cmd/guru"))
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package go-mode
  :init
  (add-hook 'go-mode-hook
            (lambda()
              (add-hook 'before-save-hook 'gofmt-before-save 'local)
              (setq-local tab-width        4)
              (setq-local indent-tabs-mode t)
              (set (make-local-variable 'company-backends)
                   '(company-go))
              (company-mode t))))
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package go-eldoc
  :after (go-mode)
  :init
  (add-hook 'go-mode-hook 'go-eldoc-setup))
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package golint
  :after (go-mode))
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package company-go
  :after (company go-mode))
#+end_src

****** Java
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package gradle-mode
  :disabled)
#+end_src

****** JavaScript
Missing description

#+begin_src emacs-lisp :tangle config.el
(add-hook 'js-mode-hook
          (lambda()
            (setq-local js-indent-level 2)
            (setq-local tab-width       2)))
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package es-mode
  :disabled)
#+end_src

****** JSON
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package json-mode)
#+end_src

****** Less
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package less-css-mode
  :disabled)
#+end_src

****** Lisp
Missing description

#+begin_src emacs-lisp :tangle config.el
(add-hook 'lisp-mode-hook
          (lambda()
            (setq-local c-basic-offset 2)
            (setq-local tab-width      2)))
#+end_src

****** Lua
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package lua-mode
  :disabled)
#+end_src

****** Markdown
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package markdown-mode)
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package markdown-preview-mode
  :disabled)
#+end_src

****** Meson
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package meson-mode)
#+end_src

****** NGINX
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package nginx-mode)
#+end_src

****** Ninja
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package ninja-mode
  :disabled)
#+end_src

****** Node
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package npm-mode
  :disabled)
#+end_src

****** Org Mode
Missing description

#+begin_src emacs-lisp :tangle config.el
(add-hook 'org-mode-hook
          (lambda()
            (add-hook 'org-metaup-hook    'windmove-up    'local)
            (add-hook 'org-metaleft-hook  'windmove-left  'local)
            (add-hook 'org-metadown-hook  'windmove-down  'local)
            (add-hook 'org-metaright-hook 'windmove-right 'local)
            (setq-local org-support-shift-select 'always)))
#+end_src

****** PHP
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package php-mode)
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package company-php
  :after (company php-mode))
#+end_src

****** Protobuf
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package protobuf-mode
  :disabled)
#+end_src

****** QML
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package qml-mode
  :disabled)
#+end_src

****** ReactJS
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package rjsx-mode
  :disabled
  :init
  (add-to-list 'auto-mode-alist
               '("components\\/.*\\.js\\'" . rjsx-mode))

  (add-hook 'rjsx-mode
            (lambda()
              (setq-local js-indent-level 2)
              (setq-local tab-width       2))))
#+end_src

****** Rust
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package rust-mode
  :disabled)
#+end_src

****** Sass
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package sass-mode
  :disabled)
#+end_src

****** Swift
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package swift-mode
  :disabled)
#+end_src

****** SystemD
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package systemd
  :disabled)
#+end_src

****** TypeScript
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package typescript-mode
  :disabled)
#+end_src

****** Vue
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package vue-mode
  :disabled)
#+end_src

****** YAML
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package yaml-mode)
#+end_src

***** magit
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package magit
  :demand t
  :bind
  ("C-c C-c" . with-editor-finish))
#+end_src

***** rainbow-delimiters
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package rainbow-delimiters
  :demand t
  :init
  (add-hook 'markdown-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'prog-mode-hook     'rainbow-delimiters-mode)
  (add-hook 'text-mode-hook     'rainbow-delimiters-mode))
#+end_src

***** realgud
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package realgud
  :disabled)
#+end_src

***** rtags
Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package rtags
  :disabled
  :init
  (add-hook 'c-mode-hook 'rtags-start-process-unless-running)
  (add-hook 'c++-mode-hook 'rtags-start-process-unless-running)
  (add-hook 'objc-mode-hook 'rtags-start-process-unless-running)

  :config
  (setq-local rtags-autostart-diagnostics         t)
  (setq-local rtags-completions-enabled           t)
  (setq-local rtags-display-result-backend        'ivy)
  (setq-local flycheck-highlighting-mode          nil)
  (setq-local flycheck-check-syntax-automatically nil)
  (rtags-diagnostics))
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package company-rtags
  :disabled
  :after (company)
  :config
  (push 'company-rtags company-backends))
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package flycheck-rtags
  :disabled
  :after (rtags flycheck)
  :config
  (add-hook 'prog-mode-hook 'flycheck-mode))
#+end_src

Missing description

#+begin_src emacs-lisp :tangle config.el
(use-package ivy-rtags
  :disabled
  :config
  (setq rtags-display-result-backend 'ivy))
#+end_src

**** Extras
This section contains additional applications or packages that I
suspect others wouldn't use, though I use these rather heavily.

***** auto-dictionary
Missing description

Source: https://github.com/nschum/auto-dictionary-mode

#+begin_src emacs-lisp :tangle config.el
(use-package auto-dictionary
  :disabled
  :config
  (add-hook 'flyspell-mode-hook (auto-dictionary-mode 1)))
#+end_src

***** circe
This package adds _another_ IRC client, which is my preferred client
even over irssi, weechat, or other clients I've used in the past. This
should only be situationally enabled, and is disabled by default.

#+begin_src emacs-lisp :tangle config.el
(use-package circe
  :disabled
  :init
  (add-hook 'circe-message-option-functions 'my-circe-message-option-chanserv)
  (add-hook 'circe-chat-mode-hook
            (lambda()
              (lui-set-prompt
               (concat (propertize (concat (buffer-name) ":")
                                   'face 'circe-prompt-face) " "))))
  (add-hook 'lui-mode-hook
            (lambda()
              (setq fringes-outside-margins t)
              (setq left-margin-width       9)
              (setq word-wrap               t)
              (setq wrap-prefix             "")))

  :config
  (defun my-circe-message-option-chanserv (nick user host command args)
    (when (and (string= "ChanServ" nick)
               (string-match "^\\[#.+?\\]" (cadr args)))
      '((dont-display . t))))

  (setq circe-default-part-message ""
        circe-default-quit-message ""
        circe-format-server-topic  "*** Topic: {userhost}: {topic-diff}"
        circe-reduce-lurker-spam   t
        circe-use-cycle-completion t)

  (setq lui-fill-type              nil
        lui-flyspell-alist         '((".*" "american"))
        lui-flyspell-p             t
        lui-logging-directory      "~/.emacs.d/var/circe"
        lui-time-stamp-format      "%H:%M:%S"
        lui-time-stamp-position    'left-margin)

  (load "lui-logging" nil t)
  (enable-lui-logging-globally)
  (require 'circe-chanop)
  (enable-circe-color-nicks)
  (setf (cdr (assoc 'continuation fringe-indicator-alist)) nil)

  (if (file-exists-p "~/.emacs.d/usr/circe.el")
      (load-file     "~/.emacs.d/usr/circe.el")))
#+end_src

***** define-word
This package lets you quickly see the definition of a word or a phrase,
and is disabled by default.

Source: https://github.com/abo-abo/define-word

#+begin_src emacs-lisp :tangle config.el
(use-package define-word
  :disabled)
#+end_src

***** dimmer
This package provides a minor mode which dims inactive buffers, namely
the buffers the cursor is not currently active in. It can be helpful
for those who use many buffers, though is disabled by default.

Source: https://github.com/gonewest818/dimmer.el

#+begin_src emacs-lisp :tangle config.el
(use-package dimmer
  :disabled
  :init
  (add-hook 'after-init-hook 'dimmer-mode))
#+end_src

***** elfeed
This package provides an extensible web feed reader, supporting both
RSS and Atom.

Source: https://github.com/skeeto/elfeed

#+begin_src emacs-lisp :tangle config.el
(use-package elfeed
  :disabled
  :bind ("C-x w" . elfeed)
  :config
  (setq-local elfeed-search-filter "@1-week-ago +unread ")
  (setq-local url-queue-timeout    30)
  (if (file-exists-p "~/.emacs.d/usr/elfeed.el")
      (load-file     "~/.emacs.d/usr/elfeed.el")))
#+end_src

***** exwm
This package provides a full-featured X tiling window manager, and is
disabled by default. I consider this to be a novelty, or a fun tech
demo, but not a viable alternative to i3wm or dwm.

Source: https://github.com/ch11ng/exwm

#+begin_src emacs-lisp :tangle config.el
(use-package exwm
  :disabled
  :init
  (require 'exwm-config)
  (exwm-config-default)

  :config
  (global-set-key (kbd "C-c <down>")  'windmove-down)
  (global-set-key (kbd "C-c <left>")  'windmove-left)
  (global-set-key (kbd "C-c <right>") 'windmove-right)
  (global-set-key (kbd "C-c <up>")    'windmove-up))
#+end_src

***** helpful
This pacakge provides an alternative to the built-in Emacs help that
provides much more contextual information.

Source: https://github.com/Wilfred/helpful

#+begin_src emacs-lisp :tangle config.el
(use-package helpful)
#+end_src

***** nov
This package provides a major mode for reading EPUB documents.

Source: https://github.com/wasamasa/nov.el

#+begin_src emacs-lisp :tangle config.el
(use-package nov
  :disabled
  :config
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
#+end_src

***** pdf-tools
This package allows viewing PDF's within Emacs, though in order to use
this package you must install the required dependencies and compile the
package as outlined in the following url:

https://github.com/politza/pdf-tools#installation

#+begin_src emacs-lisp :tangle config.el
(use-package pdf-tools
  :disabled
  :config
  (pdf-loader-install))
#+end_src

***** ranger
This package adds a minor mode that runs within ~dired~ that emulates
much of the features provided by the ~ranger~ terminal file browser.
Hardcore ~dired~ users may want to disable this.

Source: [[https://github.com/ralesi/ranger.el]]

#+begin_src emacs-lisp :tangle config.el
(use-package ranger
  :init
  (ranger-override-dired-mode t))
#+end_src
